// Generated by gencpp from file ins_pub/INSPVAXA_Type.msg
// DO NOT EDIT!


#ifndef INS_PUB_MESSAGE_INSPVAXA_TYPE_H
#define INS_PUB_MESSAGE_INSPVAXA_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_pub
{
template <class ContainerAllocator>
struct INSPVAXA_Type_
{
  typedef INSPVAXA_Type_<ContainerAllocator> Type;

  INSPVAXA_Type_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , Undulation(0.0)
    , pos_type(0)
    , slo_status(0)
    , x(0.0)
    , y(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  INSPVAXA_Type_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , Undulation(0.0)
    , pos_type(0)
    , slo_status(0)
    , x(0.0)
    , y(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _Undulation_type;
  _Undulation_type Undulation;

   typedef int32_t _pos_type_type;
  _pos_type_type pos_type;

   typedef int32_t _slo_status_type;
  _slo_status_type slo_status;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> const> ConstPtr;

}; // struct INSPVAXA_Type_

typedef ::ins_pub::INSPVAXA_Type_<std::allocator<void> > INSPVAXA_Type;

typedef boost::shared_ptr< ::ins_pub::INSPVAXA_Type > INSPVAXA_TypePtr;
typedef boost::shared_ptr< ::ins_pub::INSPVAXA_Type const> INSPVAXA_TypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_pub::INSPVAXA_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_pub::INSPVAXA_Type_<ContainerAllocator1> & lhs, const ::ins_pub::INSPVAXA_Type_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.Undulation == rhs.Undulation &&
    lhs.pos_type == rhs.pos_type &&
    lhs.slo_status == rhs.slo_status &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_pub::INSPVAXA_Type_<ContainerAllocator1> & lhs, const ::ins_pub::INSPVAXA_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_pub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63aa7d111b251cac0a2d1531ce82da16";
  }

  static const char* value(const ::ins_pub::INSPVAXA_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63aa7d111b251cacULL;
  static const uint64_t static_value2 = 0x0a2d1531ce82da16ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_pub/INSPVAXA_Type";
  }

  static const char* value(const ::ins_pub::INSPVAXA_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float32 Undulation\n"
"int32 pos_type\n"
"int32 slo_status\n"
"float64 x\n"
"float64 y\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_pub::INSPVAXA_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.Undulation);
      stream.next(m.pos_type);
      stream.next(m.slo_status);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSPVAXA_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_pub::INSPVAXA_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_pub::INSPVAXA_Type_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "Undulation: ";
    Printer<float>::stream(s, indent + "  ", v.Undulation);
    s << indent << "pos_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos_type);
    s << indent << "slo_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.slo_status);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_PUB_MESSAGE_INSPVAXA_TYPE_H
